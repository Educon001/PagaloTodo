@using System.Reflection
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model List<FieldRequest>

@{
    //Variables necesarias
    int currInd = ViewBag.Count ?? 0;
}

<head>
    <link rel="stylesheet" href="~/create-format-grid.css" asp-append-version="true" />
</head>

@Html.Partial("InnerPageHeader", "Create Conciliation Format")
<section class="inner-page">
<div class="container">
    <form method="post" asp-route="createFormatR" asp-route-id="@ViewBag.ServiceId" class="border p-3 mt-4">
        <div id="htmlContainer" class="grid-container">
            <div>
                <h3>FIELD 0</h3>
            </div>
            <div class="form-group col-auto d-inline-block">
                <label asp-for="@Model[0].Name">Name</label>
                <input asp-for="@Model[0].Name" class="form-control">
                <span asp-validation-for="@Model[0].Name" class="text-danger"></span>
            </div>
            <div class="form-group col-auto d-inline-block">
                <label asp-for="@Model[0].Format">Formato</label>
                <input asp-for="@Model[0].Format" class="form-control">
                <span asp-validation-for="@Model[0].Format" class="text-danger"></span>
            </div>
            <div class="form-group col-auto d-inline-block">
                <label asp-for="@Model[0].Length">Longitud</label>
                <input asp-for="@Model[0].Length" class="form-control">
                <span asp-validation-for="@Model[0].Length" class="text-danger"></span>
            </div>
            
            @{
                List<string> finalProps = new List<string>();
                
                List<ProviderModel> providers = ViewBag.Message;
                Type PaymentType = typeof(PaymentModel);
                PropertyInfo[] paymentProps = PaymentType.GetProperties();
                foreach (var prop in paymentProps)
                {
                    finalProps.Add($"payment.{prop.Name.ToLower()}");
                }
                
                Type ConsumerType = typeof(ConsumerModel);
                PropertyInfo[] consumerProps = ConsumerType.GetProperties();
                foreach (var prop in consumerProps)
                {
                    finalProps.Add($"consumer.{prop.Name.ToLower()}");
                }
                

                foreach (PaymentFieldModel field in ViewBag.PaymentFormat)
                {
                    finalProps.Add($"paymentdetail.{field.Name.ToLower()}");
                }
                

                IEnumerable<SelectListItem> selectList = finalProps.Select(p => new SelectListItem
                     {
                         Text = p,
                         Value = p
                     });
                ViewBag.List = selectList;
            }
            
            <div class="form-group col-auto d-inline-block">
                <label asp-for="@Model[0].AttrReference">Referencia</label>
                <select asp-for="@Model[0].AttrReference" asp-items="selectList" class="form-control"></select>
            </div>
        </div>
        <br>
        <button type="submit" class="btn btn-primary" id="btnRenderHtml2">Create Conciliation Format</button>
    </form>
    <div class="container text-end">
        <button class="btn btn-dark" id="btnRenderHtml">Add Field</button>
        <a asp-controller="Service" asp-action="Index" class="btn btn-secondary">Back</a>
    </div>
</div>
</section>

    @section Scripts
{   @{
        <partial name="_ValidationScriptsPartial"/>
    }
}

<partial name="_ValidationScriptsPartial"/>


<script >
    let count = 0;
    let element = document.getElementById("btnRenderHtml");
    let container = document.getElementById("htmlContainer");
    let mainForm = document.querySelector("form");
    let selectTag = document.getElementById("z0__AttrReference");
    let optionElements = selectTag.options;
    
    element.addEventListener("click", function (){
        count++;
        let newDiv = document.createElement("div");
        newDiv.className = "form-inline";
        newDiv.innerHTML = `<br><div><h3>FIELD ${count}</h3></div><div class="form-group col-auto d-inline-block"> <label for="z${count}__Name">Name</label>
                                            <input type="text" id="z${count}__Name" name="[${count}].Name" class="form-control" data-val="true" data-val-required="The Name field is required." value>
                                            <span class="text-danger field-validation-valid" data-valmsg-for="[${count}].Name" data-valmsg-replace="true"></span>
                                        </div>
                                        <div class="form-group col-auto d-inline-block">
                                             <label for="z${count}__Format">Formato</label>
                                             <input type="text" id="z${count}__Format" name="[${count}].Format" class="form-control" data-val="true" data-val-required="The Format field is required." value>
                                             <span class="text-danger field-validation-valid" data-valmsg-for="[${count}].Format" data-valmsg-replace="true"></span>
                                        </div>
                                        <div class="form-group col-auto d-inline-block">
                                             <label for="z${count}__Length">Longitud</label>
                                             <input type="number" id="z${count}__Length" name="[${count}].Length" class="form-control" data-val="true" data-val-required="The Length field is required." value>
                                             <span class="text-danger field-validation-valid" data-valmsg-for="[${count}].Length" data-valmsg-replace="true"></span>
                                        </div>
                                        <div class="form-group col-auto d-inline-block">
                                             <label for="z${count}__AttrReference">Atributo Referencia</label>
                                             <select id="z${count}__AttrReference" name="[${count}].AttrReference" class="form-control" data-val="true" data-val-required="The AttrReference field is required." value>
                                             </select>
                                             <span class="text-danger field-validation-valid" data-valmsg-for="[${count}].AttrReference" data-valmsg-replace="true"></span>
                                        </div>`;
        container.appendChild(newDiv);
        let secondSelectTag = document.getElementById(`z${count}__AttrReference`)
        
       // Iterate through the list of option elements and add them to the second select tag.
       for (var i = 0; i < optionElements.length; i++) {
         var optionElement = optionElements[i];
         var value = optionElement.value;
         var text = optionElement.text;
         var newOption = document.createElement("option");
         newOption.value = value;
         newOption.text = text;
         secondSelectTag.appendChild(newOption);
       }
    });

</script>
